#!/usr/bin/env bash

# Author: Deac Karns
# Date: 10/09/2024
# Description: A simple script to switch between kubectl contexts and versions, and to download new versions of kubectl.

red=$(tput setaf 1)
gold=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
default=$(tput sgr0)

bin_dir=$HOME/.kube/kubectl/bin

symlink_dir=.kube/kubectl
symlink_path=$HOME/$symlink_dir

echo "██╗  ██╗████████╗██╗  ██╗"
echo "██║ ██╔╝╚══██╔══╝╚██╗██╔╝"
echo "█████╔╝    ██║    ╚███╔╝ "
echo "██╔═██╗    ██║    ██╔██╗ "
echo "██║  ██╗   ██║   ██╔╝ ██╗"
echo "╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝"
echo -e "${gold}Kubectl Context Switcher\n\n${default}"

function verify_path() {
  if [[ ":$PATH:" != *":$symlink_path:"* ]]; then
    echo -e "${red}The directory $symlink_path is not in your PATH.${default}"
    echo -e "${gold}You need to add the following to your PATH:\n - ${magenta}\$HOME/$symlink_dir${default}"

    kill -INT $$
  fi
}

function verify_symlink() {
  if [ ! -L $symlink_path/kubectl ]; then
    echo -e "${red}kubectl symlink does not exist. \nLets get you a version of kubectl${default}"
    kubectl_get
    kill -INT $$
  fi
}

function switch_context() {

  CONTEXTS=( $(kubectl config get-contexts | awk 'NR!=1''{print $2}') )

  echo -e "\n${gold}Select context to switch to:${default}"
  PS3="${cyan}Select a kubectl context: $gold"
  select context in "${CONTEXTS[@]}"; do
    case "$context" in
      "")
        echo "${red}Invalid Option ${magenta}CTL + C to quit${default}"
      ;;
      *)
        kubectl config use-context $context > /dev/null
        echo "${gold}Kubectl Context switched to ${magenta}$context${default}"
        break
      ;;
    esac
  done
}

function kubectl_use() {

  # Get the list of files in the bin directory and store them in an array.
  files=("$bin_dir"/*)

  # This script processes an array of file paths and modifies each element to retain only the file name,
  # stripping away the directory path. The resulting array will contain just the base names of the files.
  files=("${files[@]##*/}")

  echo -e "\n${gold}Select kubectl version to use:${default}"
  # Prompt the user to select a file from the array.
  PS3="${cyan}Select installed version: $gold"
  select file in "${files[@]}"; do
    case "$file" in
      "")
        echo "${red}Invalid Option ${magenta}CTL + C to quit${default}"
      ;;  # This is a fake; any invalid entry makes $context=="", not just "q".
      *)
        # update the symlink to point to the selected file
        echo "kubectl set to version: ${magenta}$file${default}"
        ln -nsf $bin_dir/${file} $symlink_path/kubectl
        break
      ;;
    esac
  done


}

function kubectl_get() {
  read -p "${cyan}Enter the kubectl version to get: ${default}" version
  echo "${magenta}You have selected kubectl version: ${version}${default}"

  if [[ $(uname -m) == "x86_64" ]]; then
    echo "${cyan}Detected architecture: amd64${default}"
    arch="amd64"
  elif [[ $(uname -m) == "arm64" ]]; then
    echo "${cyan}Detected architecture: arm64${default}"
    arch="arm64"
  else
    echo "${red}Unsupported architecture. Use amd64 or arm64${default}"
    kill -INT $$
  fi

  if [[ $(uname) == "Darwin" ]]; then
    echo "${cyan}Detected OS: macOS${default}"
    os="darwin"
  elif [[ $(uname) == "Linux" ]]; then
    echo "${cyan}Detected OS: Linux${default}"
    os="linux"
  else
    echo "${red}Unsupported OS. Use Mac or Linux${default}"
    kill -INT $$
  fi

  mkdir -p $bin_dir

  echo -e "${cyan}Downloading kubectl version: ${magenta}${version}${default}"
  curl -Ls "https://dl.k8s.io/release/v${version}/bin/${os}/${arch}/kubectl" -o $bin_dir/v${version}

  echo -e "${cyan}Creating symlink to kubectl version: ${magenta}${version}${default}"
  ln -nsf $bin_dir/v${version} $symlink_path/kubectl

  echo -e "${cyan}Setting execute permissions for kubectl${default}"
  chmod +x $symlink_path/kubectl
}

function kubectl_pull() {

  # this is the "folder" in lastpass
  NAMESPACE="kubernetes-configs"

  IDS=$(lpass show -xjG '.*' | jq --raw-output '.[] | select( .group == "'$NAMESPACE'" ) | select(.url != "http://group" ) | .id')

  echo -e "\n${cyan}Creating the following kube config files in ${magenta}$HOME/.kube${cyan}:${default}\n"

  for ID in $IDS
  do
    NAME=$(lpass show $ID --name)
    printf "%-40s %s\n" "$NAME" "${magenta}$ID${default}"
    CONFIG="$(lpass show $ID --notes)"

    echo "$CONFIG" > $HOME/.kube/config-$NAME
  done
}

verify_path
verify_symlink

PS3="${cyan}Select an option: $gold"
options=("Switch context" "Use kubectl version" "Get kubectl version" "Get config from lastpass")
select opt in "${options[@]}"; do
  case $opt in
    "Switch context")
      switch_context
      break
      ;;
    "Use kubectl version")
      kubectl_use
      break
      ;;
    "Get kubectl version")
      kubectl_get
      break
      ;;
    "Get config from lastpass")
      kubectl_pull
      break
      ;;
    "")
      echo "${red}Invalid Option ${magenta}CTL + C to quit${default}"
      ;;
  esac
done
